randomtestadventurer.c:
Testing Adventurer.
RANDOM TESTS.
TEST PASSED (+2 Cards) - expected outcome: 16 	 actual outcome: 16
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 346

TEST PASSED (+2 Cards) - expected outcome: 502 	 actual outcome: 502
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 167

TEST PASSED (+2 Cards) - expected outcome: 313 	 actual outcome: 313
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 235

TEST PASSED (+2 Cards) - expected outcome: 462 	 actual outcome: 462
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 87

TEST PASSED (+2 Cards) - expected outcome: 461 	 actual outcome: 461
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 502

TEST PASSED (+2 Cards) - expected outcome: 404 	 actual outcome: 404
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 299

TEST PASSED (+2 Cards) - expected outcome: 387 	 actual outcome: 387
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 192

TEST PASSED (+2 Cards) - expected outcome: 395 	 actual outcome: 395
TEST FAILED (+n Discard) - expected outcome: 45 	 actual outcome: 314

TEST PASSED (+2 Cards) - expected outcome: 270 	 actual outcome: 270
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 249

TEST PASSED (+2 Cards) - expected outcome: 32 	 actual outcome: 32
TEST FAILED (+n Discard) - expected outcome: 62 	 actual outcome: 482

TEST PASSED (+2 Cards) - expected outcome: 495 	 actual outcome: 495
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 418

TEST PASSED (+2 Cards) - expected outcome: 390 	 actual outcome: 390
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 138

TEST PASSED (+2 Cards) - expected outcome: 312 	 actual outcome: 312
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 366

TEST PASSED (+2 Cards) - expected outcome: 323 	 actual outcome: 323
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 454

TEST PASSED (+2 Cards) - expected outcome: 57 	 actual outcome: 57
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 259

TEST PASSED (+2 Cards) - expected outcome: 501 	 actual outcome: 501
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 439

TEST PASSED (+2 Cards) - expected outcome: 279 	 actual outcome: 279
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 60

TEST PASSED (+2 Cards) - expected outcome: 121 	 actual outcome: 121
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 105

TEST PASSED (+2 Cards) - expected outcome: 140 	 actual outcome: 140
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 200

TEST PASSED (+2 Cards) - expected outcome: 265 	 actual outcome: 265
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 233

TEST PASSED (+2 Cards) - expected outcome: 181 	 actual outcome: 181
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 88

TEST PASSED (+2 Cards) - expected outcome: 454 	 actual outcome: 454
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 375

TEST PASSED (+2 Cards) - expected outcome: 96 	 actual outcome: 96
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 20

TEST PASSED (+2 Cards) - expected outcome: 266 	 actual outcome: 266
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 199

TEST PASSED (+2 Cards) - expected outcome: 153 	 actual outcome: 153
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 415

TEST PASSED (+2 Cards) - expected outcome: 206 	 actual outcome: 206
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 403

TEST PASSED (+2 Cards) - expected outcome: 352 	 actual outcome: 352
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 147

TEST PASSED (+2 Cards) - expected outcome: 116 	 actual outcome: 116
TEST FAILED (+n Discard) - expected outcome: 80 	 actual outcome: 512

TEST PASSED (+2 Cards) - expected outcome: 290 	 actual outcome: 290
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 421

TEST PASSED (+2 Cards) - expected outcome: 293 	 actual outcome: 293
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 13

TEST PASSED (+2 Cards) - expected outcome: 314 	 actual outcome: 314
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 385

TEST PASSED (+2 Cards) - expected outcome: 236 	 actual outcome: 236
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 336

TEST PASSED (+2 Cards) - expected outcome: 469 	 actual outcome: 469
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 95

TEST PASSED (+2 Cards) - expected outcome: 499 	 actual outcome: 499
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 217

TEST PASSED (+2 Cards) - expected outcome: 365 	 actual outcome: 365
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 334

TEST PASSED (+2 Cards) - expected outcome: 114 	 actual outcome: 114
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 291

TEST PASSED (+2 Cards) - expected outcome: 443 	 actual outcome: 443
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 423

TEST PASSED (+2 Cards) - expected outcome: 436 	 actual outcome: 436
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 175

TEST PASSED (+2 Cards) - expected outcome: 54 	 actual outcome: 54
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 308

TEST FAILED (+2 Cards) - expected outcome: 112 	 actual outcome: 111
TEST FAILED (+n Discard) - expected outcome: -1 	 actual outcome: 351

TEST PASSED (+2 Cards) - expected outcome: 130 	 actual outcome: 130
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 509

TEST PASSED (+2 Cards) - expected outcome: 377 	 actual outcome: 377
TEST FAILED (+n Discard) - expected outcome: 44 	 actual outcome: 540

TEST PASSED (+2 Cards) - expected outcome: 158 	 actual outcome: 158
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 188

TEST PASSED (+2 Cards) - expected outcome: 176 	 actual outcome: 176
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 282

TEST PASSED (+2 Cards) - expected outcome: 107 	 actual outcome: 107
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 182

TEST PASSED (+2 Cards) - expected outcome: 59 	 actual outcome: 59
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 131

TEST PASSED (+2 Cards) - expected outcome: 122 	 actual outcome: 122
TEST FAILED (+n Discard) - expected outcome: 64 	 actual outcome: 398

TEST PASSED (+2 Cards) - expected outcome: 135 	 actual outcome: 135
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 237

TEST PASSED (+2 Cards) - expected outcome: 251 	 actual outcome: 251
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 77

TEST PASSED (+2 Cards) - expected outcome: 394 	 actual outcome: 394
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 167

TEST PASSED (+2 Cards) - expected outcome: 419 	 actual outcome: 419
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 22

TEST PASSED (+2 Cards) - expected outcome: 277 	 actual outcome: 277
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 367

TEST PASSED (+2 Cards) - expected outcome: 19 	 actual outcome: 19
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 490

TEST PASSED (+2 Cards) - expected outcome: 76 	 actual outcome: 76
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 345

TEST PASSED (+2 Cards) - expected outcome: 28 	 actual outcome: 28
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 44

TEST PASSED (+2 Cards) - expected outcome: 329 	 actual outcome: 329
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 58

TEST PASSED (+2 Cards) - expected outcome: 187 	 actual outcome: 187
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 76

TEST PASSED (+2 Cards) - expected outcome: 227 	 actual outcome: 227
TEST FAILED (+n Discard) - expected outcome: 36 	 actual outcome: 249

TEST PASSED (+2 Cards) - expected outcome: 17 	 actual outcome: 17
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 310

TEST PASSED (+2 Cards) - expected outcome: 398 	 actual outcome: 398
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 426

TEST PASSED (+2 Cards) - expected outcome: 40 	 actual outcome: 40
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 465

TEST PASSED (+2 Cards) - expected outcome: 153 	 actual outcome: 153
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 326

TEST PASSED (+2 Cards) - expected outcome: 228 	 actual outcome: 228
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 45

TEST PASSED (+2 Cards) - expected outcome: 19 	 actual outcome: 19
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 311

TEST PASSED (+2 Cards) - expected outcome: 339 	 actual outcome: 339
TEST FAILED (+n Discard) - expected outcome: 61 	 actual outcome: 161

TEST PASSED (+2 Cards) - expected outcome: 272 	 actual outcome: 272
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 468

TEST PASSED (+2 Cards) - expected outcome: 420 	 actual outcome: 420
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 310

TEST PASSED (+2 Cards) - expected outcome: 428 	 actual outcome: 428
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 91

TEST PASSED (+2 Cards) - expected outcome: 72 	 actual outcome: 72
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 78

TEST PASSED (+2 Cards) - expected outcome: 81 	 actual outcome: 81
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 13

TEST PASSED (+2 Cards) - expected outcome: 476 	 actual outcome: 476
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 377

TEST PASSED (+2 Cards) - expected outcome: 146 	 actual outcome: 146
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 180

TEST PASSED (+2 Cards) - expected outcome: 57 	 actual outcome: 57
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 211

TEST PASSED (+2 Cards) - expected outcome: 495 	 actual outcome: 495
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 369

TEST PASSED (+2 Cards) - expected outcome: 108 	 actual outcome: 108
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 167

TEST PASSED (+2 Cards) - expected outcome: 52 	 actual outcome: 52
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 168

TEST PASSED (+2 Cards) - expected outcome: 396 	 actual outcome: 396
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 388

TEST PASSED (+2 Cards) - expected outcome: 431 	 actual outcome: 431
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 320

TEST PASSED (+2 Cards) - expected outcome: 327 	 actual outcome: 327
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 436

TEST PASSED (+2 Cards) - expected outcome: 380 	 actual outcome: 380
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 111

TEST PASSED (+2 Cards) - expected outcome: 502 	 actual outcome: 502
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 364

TEST PASSED (+2 Cards) - expected outcome: 346 	 actual outcome: 346
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 397

TEST PASSED (+2 Cards) - expected outcome: 238 	 actual outcome: 238
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 488

TEST PASSED (+2 Cards) - expected outcome: 489 	 actual outcome: 489
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 431

TEST PASSED (+2 Cards) - expected outcome: 239 	 actual outcome: 239
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 491

TEST PASSED (+2 Cards) - expected outcome: 316 	 actual outcome: 316
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 36

TEST PASSED (+2 Cards) - expected outcome: 23 	 actual outcome: 23
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 67

TEST PASSED (+2 Cards) - expected outcome: 399 	 actual outcome: 399
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 70

TEST PASSED (+2 Cards) - expected outcome: 147 	 actual outcome: 147
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 324

TEST PASSED (+2 Cards) - expected outcome: 298 	 actual outcome: 298
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 308

TEST PASSED (+2 Cards) - expected outcome: 170 	 actual outcome: 170
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 407

TEST PASSED (+2 Cards) - expected outcome: 226 	 actual outcome: 226
TEST FAILED (+n Discard) - expected outcome: 66 	 actual outcome: 255

TEST PASSED (+2 Cards) - expected outcome: 325 	 actual outcome: 325
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 342

TEST PASSED (+2 Cards) - expected outcome: 172 	 actual outcome: 172
TEST FAILED (+n Discard) - expected outcome: 66 	 actual outcome: 333

TEST PASSED (+2 Cards) - expected outcome: 43 	 actual outcome: 43
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 99

TEST PASSED (+2 Cards) - expected outcome: 208 	 actual outcome: 208
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 491

TEST PASSED (+2 Cards) - expected outcome: 468 	 actual outcome: 468
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 240

TEST PASSED (+2 Cards) - expected outcome: 129 	 actual outcome: 129
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 487

TEST PASSED (+2 Cards) - expected outcome: 15 	 actual outcome: 15
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 323

TEST PASSED (+2 Cards) - expected outcome: 184 	 actual outcome: 184
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 341

TEST PASSED (+2 Cards) - expected outcome: 449 	 actual outcome: 449
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 299

TEST PASSED (+2 Cards) - expected outcome: 68 	 actual outcome: 68
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 497

TEST PASSED (+2 Cards) - expected outcome: 170 	 actual outcome: 170
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 156

TEST PASSED (+2 Cards) - expected outcome: 45 	 actual outcome: 45
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 327

TEST PASSED (+2 Cards) - expected outcome: 397 	 actual outcome: 397
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 231

TEST PASSED (+2 Cards) - expected outcome: 29 	 actual outcome: 29
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 221

TEST PASSED (+2 Cards) - expected outcome: 295 	 actual outcome: 295
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 122

TEST PASSED (+2 Cards) - expected outcome: 287 	 actual outcome: 287
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 237

TEST PASSED (+2 Cards) - expected outcome: 451 	 actual outcome: 451
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 192

TEST PASSED (+2 Cards) - expected outcome: 172 	 actual outcome: 172
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 76

TEST PASSED (+2 Cards) - expected outcome: 83 	 actual outcome: 83
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 224

TEST PASSED (+2 Cards) - expected outcome: 309 	 actual outcome: 309
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 125

TEST PASSED (+2 Cards) - expected outcome: 442 	 actual outcome: 442
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 457

TEST PASSED (+2 Cards) - expected outcome: 450 	 actual outcome: 450
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 258

TEST PASSED (+2 Cards) - expected outcome: 118 	 actual outcome: 118
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 39

TEST PASSED (+2 Cards) - expected outcome: 338 	 actual outcome: 338
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 80

TEST PASSED (+2 Cards) - expected outcome: 347 	 actual outcome: 347
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 469

TEST PASSED (+2 Cards) - expected outcome: 183 	 actual outcome: 183
TEST FAILED (+n Discard) - expected outcome: 34 	 actual outcome: 529

TEST FAILED (+2 Cards) - expected outcome: 392 	 actual outcome: 391
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 260

TEST PASSED (+2 Cards) - expected outcome: 495 	 actual outcome: 495
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 345

TEST PASSED (+2 Cards) - expected outcome: 214 	 actual outcome: 214
TEST FAILED (+n Discard) - expected outcome: 46 	 actual outcome: 266

TEST PASSED (+2 Cards) - expected outcome: 209 	 actual outcome: 209
TEST FAILED (+n Discard) - expected outcome: 40 	 actual outcome: 463

TEST PASSED (+2 Cards) - expected outcome: 281 	 actual outcome: 281
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 117

TEST PASSED (+2 Cards) - expected outcome: 335 	 actual outcome: 335
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 20

TEST PASSED (+2 Cards) - expected outcome: 134 	 actual outcome: 134
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 218

TEST PASSED (+2 Cards) - expected outcome: 482 	 actual outcome: 482
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 77

TEST PASSED (+2 Cards) - expected outcome: 299 	 actual outcome: 299
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 372

TEST PASSED (+2 Cards) - expected outcome: 384 	 actual outcome: 384
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 209

TEST PASSED (+2 Cards) - expected outcome: 13 	 actual outcome: 13
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 223

TEST PASSED (+2 Cards) - expected outcome: 360 	 actual outcome: 360
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 86

TEST PASSED (+2 Cards) - expected outcome: 346 	 actual outcome: 346
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 188

TEST PASSED (+2 Cards) - expected outcome: 374 	 actual outcome: 374
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 418

TEST PASSED (+2 Cards) - expected outcome: 61 	 actual outcome: 61
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 471

TEST PASSED (+2 Cards) - expected outcome: 147 	 actual outcome: 147
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 80

TEST PASSED (+2 Cards) - expected outcome: 28 	 actual outcome: 28
TEST FAILED (+n Discard) - expected outcome: 51 	 actual outcome: 532

TEST PASSED (+2 Cards) - expected outcome: 158 	 actual outcome: 158
TEST FAILED (+n Discard) - expected outcome: 26 	 actual outcome: 213

TEST PASSED (+2 Cards) - expected outcome: 418 	 actual outcome: 418
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 469

TEST PASSED (+2 Cards) - expected outcome: 7 	 actual outcome: 7
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 123

TEST PASSED (+2 Cards) - expected outcome: 114 	 actual outcome: 114
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 167

TEST PASSED (+2 Cards) - expected outcome: 6 	 actual outcome: 6
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 240

TEST PASSED (+2 Cards) - expected outcome: 159 	 actual outcome: 159
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 39

TEST PASSED (+2 Cards) - expected outcome: 427 	 actual outcome: 427
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 225

TEST PASSED (+2 Cards) - expected outcome: 451 	 actual outcome: 451
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 451

TEST PASSED (+2 Cards) - expected outcome: 332 	 actual outcome: 332
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 102

TEST PASSED (+2 Cards) - expected outcome: 68 	 actual outcome: 68
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 191

TEST PASSED (+2 Cards) - expected outcome: 425 	 actual outcome: 425
TEST FAILED (+n Discard) - expected outcome: 34 	 actual outcome: 236

TEST PASSED (+2 Cards) - expected outcome: 225 	 actual outcome: 225
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 424

TEST PASSED (+2 Cards) - expected outcome: 179 	 actual outcome: 179
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 164

TEST PASSED (+2 Cards) - expected outcome: 402 	 actual outcome: 402
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 415

TEST PASSED (+2 Cards) - expected outcome: 327 	 actual outcome: 327
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 472

TEST PASSED (+2 Cards) - expected outcome: 336 	 actual outcome: 336
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 166

TEST PASSED (+2 Cards) - expected outcome: 141 	 actual outcome: 141
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 278

TEST PASSED (+2 Cards) - expected outcome: 268 	 actual outcome: 268
TEST FAILED (+n Discard) - expected outcome: 34 	 actual outcome: 390

TEST PASSED (+2 Cards) - expected outcome: 165 	 actual outcome: 165
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 296

TEST PASSED (+2 Cards) - expected outcome: 362 	 actual outcome: 362
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 438

TEST PASSED (+2 Cards) - expected outcome: 52 	 actual outcome: 52
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 285

TEST PASSED (+2 Cards) - expected outcome: 59 	 actual outcome: 59
TEST FAILED (+n Discard) - expected outcome: 59 	 actual outcome: 377

TEST PASSED (+2 Cards) - expected outcome: 346 	 actual outcome: 346
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 446

TEST PASSED (+2 Cards) - expected outcome: 326 	 actual outcome: 326
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 316

TEST PASSED (+2 Cards) - expected outcome: 266 	 actual outcome: 266
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 406

TEST PASSED (+2 Cards) - expected outcome: 369 	 actual outcome: 369
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 470

TEST PASSED (+2 Cards) - expected outcome: 495 	 actual outcome: 495
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 286

TEST PASSED (+2 Cards) - expected outcome: 82 	 actual outcome: 82
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 68

TEST PASSED (+2 Cards) - expected outcome: 429 	 actual outcome: 429
TEST FAILED (+n Discard) - expected outcome: 41 	 actual outcome: 215

TEST PASSED (+2 Cards) - expected outcome: 111 	 actual outcome: 111
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 244

TEST PASSED (+2 Cards) - expected outcome: 345 	 actual outcome: 345
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 324

TEST PASSED (+2 Cards) - expected outcome: 327 	 actual outcome: 327
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 148

TEST PASSED (+2 Cards) - expected outcome: 395 	 actual outcome: 395
TEST FAILED (+n Discard) - expected outcome: 44 	 actual outcome: 88

TEST PASSED (+2 Cards) - expected outcome: 497 	 actual outcome: 497
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 102

TEST PASSED (+2 Cards) - expected outcome: 106 	 actual outcome: 106
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 246

TEST PASSED (+2 Cards) - expected outcome: 311 	 actual outcome: 311
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 404

TEST PASSED (+2 Cards) - expected outcome: 325 	 actual outcome: 325
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 328

TEST PASSED (+2 Cards) - expected outcome: 162 	 actual outcome: 162
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 158

TEST PASSED (+2 Cards) - expected outcome: 247 	 actual outcome: 247
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 250

TEST PASSED (+2 Cards) - expected outcome: 66 	 actual outcome: 66
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 264

TEST PASSED (+2 Cards) - expected outcome: 245 	 actual outcome: 245
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 476

TEST PASSED (+2 Cards) - expected outcome: 163 	 actual outcome: 163
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 50

TEST PASSED (+2 Cards) - expected outcome: 289 	 actual outcome: 289
TEST FAILED (+n Discard) - expected outcome: 26 	 actual outcome: 241

TEST PASSED (+2 Cards) - expected outcome: 311 	 actual outcome: 311
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 87

TEST PASSED (+2 Cards) - expected outcome: 225 	 actual outcome: 225
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 456

TEST PASSED (+2 Cards) - expected outcome: 364 	 actual outcome: 364
TEST FAILED (+n Discard) - expected outcome: 36 	 actual outcome: 51

TEST PASSED (+2 Cards) - expected outcome: 41 	 actual outcome: 41
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 366

TEST PASSED (+2 Cards) - expected outcome: 344 	 actual outcome: 344
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 372

TEST PASSED (+2 Cards) - expected outcome: 116 	 actual outcome: 116
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 513

TEST PASSED (+2 Cards) - expected outcome: 472 	 actual outcome: 472
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 291

TEST PASSED (+2 Cards) - expected outcome: 59 	 actual outcome: 59
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 421

TEST PASSED (+2 Cards) - expected outcome: 297 	 actual outcome: 297
TEST FAILED (+n Discard) - expected outcome: 52 	 actual outcome: 153

TEST PASSED (+2 Cards) - expected outcome: 477 	 actual outcome: 477
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 34

TEST PASSED (+2 Cards) - expected outcome: 361 	 actual outcome: 361
TEST FAILED (+n Discard) - expected outcome: 57 	 actual outcome: 490

TEST PASSED (+2 Cards) - expected outcome: 190 	 actual outcome: 190
TEST FAILED (+n Discard) - expected outcome: 60 	 actual outcome: 74

TEST PASSED (+2 Cards) - expected outcome: 54 	 actual outcome: 54
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 255

TEST PASSED (+2 Cards) - expected outcome: 254 	 actual outcome: 254
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 399

TEST PASSED (+2 Cards) - expected outcome: 41 	 actual outcome: 41
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 88

TEST PASSED (+2 Cards) - expected outcome: 402 	 actual outcome: 402
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 140

TEST PASSED (+2 Cards) - expected outcome: 416 	 actual outcome: 416
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 244

TEST PASSED (+2 Cards) - expected outcome: 281 	 actual outcome: 281
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 319

TEST PASSED (+2 Cards) - expected outcome: 280 	 actual outcome: 280
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 114

TEST PASSED (+2 Cards) - expected outcome: 93 	 actual outcome: 93
TEST FAILED (+n Discard) - expected outcome: 36 	 actual outcome: 84

TEST PASSED (+2 Cards) - expected outcome: 267 	 actual outcome: 267
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 241

TEST PASSED (+2 Cards) - expected outcome: 86 	 actual outcome: 86
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 417

TEST PASSED (+2 Cards) - expected outcome: 392 	 actual outcome: 392
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 305

TEST PASSED (+2 Cards) - expected outcome: 265 	 actual outcome: 265
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 422

TEST PASSED (+2 Cards) - expected outcome: 343 	 actual outcome: 343
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 270

TEST PASSED (+2 Cards) - expected outcome: 245 	 actual outcome: 245
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 246

TEST PASSED (+2 Cards) - expected outcome: 286 	 actual outcome: 286
TEST FAILED (+n Discard) - expected outcome: 35 	 actual outcome: 332

TEST PASSED (+2 Cards) - expected outcome: 121 	 actual outcome: 121
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 235

TEST PASSED (+2 Cards) - expected outcome: 408 	 actual outcome: 408
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 104

TEST PASSED (+2 Cards) - expected outcome: 401 	 actual outcome: 401
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 473

TEST PASSED (+2 Cards) - expected outcome: 143 	 actual outcome: 143
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 77

TEST PASSED (+2 Cards) - expected outcome: 253 	 actual outcome: 253
TEST FAILED (+n Discard) - expected outcome: 44 	 actual outcome: 532

TEST PASSED (+2 Cards) - expected outcome: 307 	 actual outcome: 307
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 294

TEST PASSED (+2 Cards) - expected outcome: 264 	 actual outcome: 264
TEST FAILED (+n Discard) - expected outcome: 54 	 actual outcome: 402

TEST PASSED (+2 Cards) - expected outcome: 128 	 actual outcome: 128
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 142

TEST PASSED (+2 Cards) - expected outcome: 53 	 actual outcome: 53
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 389

TEST PASSED (+2 Cards) - expected outcome: 319 	 actual outcome: 319
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 20

TEST PASSED (+2 Cards) - expected outcome: 56 	 actual outcome: 56
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 305

TEST PASSED (+2 Cards) - expected outcome: 460 	 actual outcome: 460
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 132

TEST PASSED (+2 Cards) - expected outcome: 57 	 actual outcome: 57
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 194

TEST PASSED (+2 Cards) - expected outcome: 249 	 actual outcome: 249
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 84

TEST PASSED (+2 Cards) - expected outcome: 278 	 actual outcome: 278
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 372

TEST PASSED (+2 Cards) - expected outcome: 60 	 actual outcome: 60
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 166

TEST PASSED (+2 Cards) - expected outcome: 156 	 actual outcome: 156
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 311

TEST PASSED (+2 Cards) - expected outcome: 468 	 actual outcome: 468
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 80

TEST PASSED (+2 Cards) - expected outcome: 338 	 actual outcome: 338
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 98

TEST PASSED (+2 Cards) - expected outcome: 315 	 actual outcome: 315
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 308

TEST PASSED (+2 Cards) - expected outcome: 356 	 actual outcome: 356
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 97

TEST PASSED (+2 Cards) - expected outcome: 399 	 actual outcome: 399
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 346

TEST PASSED (+2 Cards) - expected outcome: 401 	 actual outcome: 401
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 186

TEST PASSED (+2 Cards) - expected outcome: 461 	 actual outcome: 461
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 426

TEST PASSED (+2 Cards) - expected outcome: 436 	 actual outcome: 436
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 437

TEST PASSED (+2 Cards) - expected outcome: 25 	 actual outcome: 25
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 136

TEST PASSED (+2 Cards) - expected outcome: 289 	 actual outcome: 289
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 505

TEST PASSED (+2 Cards) - expected outcome: 447 	 actual outcome: 447
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 37

TEST PASSED (+2 Cards) - expected outcome: 134 	 actual outcome: 134
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 34

TEST PASSED (+2 Cards) - expected outcome: 97 	 actual outcome: 97
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 281

TEST PASSED (+2 Cards) - expected outcome: 113 	 actual outcome: 113
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 505

TEST PASSED (+2 Cards) - expected outcome: 140 	 actual outcome: 140
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 335

TEST PASSED (+2 Cards) - expected outcome: 451 	 actual outcome: 451
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 28

TEST PASSED (+2 Cards) - expected outcome: 43 	 actual outcome: 43
TEST FAILED (+n Discard) - expected outcome: 44 	 actual outcome: 295

TEST PASSED (+2 Cards) - expected outcome: 316 	 actual outcome: 316
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 286

TEST PASSED (+2 Cards) - expected outcome: 270 	 actual outcome: 270
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 494

TEST PASSED (+2 Cards) - expected outcome: 313 	 actual outcome: 313
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 446

TEST PASSED (+2 Cards) - expected outcome: 354 	 actual outcome: 354
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 293

TEST PASSED (+2 Cards) - expected outcome: 354 	 actual outcome: 354
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 441

TEST PASSED (+2 Cards) - expected outcome: 342 	 actual outcome: 342
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 35

TEST PASSED (+2 Cards) - expected outcome: 427 	 actual outcome: 427
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 460

TEST PASSED (+2 Cards) - expected outcome: 261 	 actual outcome: 261
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 502

TEST PASSED (+2 Cards) - expected outcome: 445 	 actual outcome: 445
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 278

TEST PASSED (+2 Cards) - expected outcome: 483 	 actual outcome: 483
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 177

TEST PASSED (+2 Cards) - expected outcome: 33 	 actual outcome: 33
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 255

TEST PASSED (+2 Cards) - expected outcome: 40 	 actual outcome: 40
TEST FAILED (+n Discard) - expected outcome: 26 	 actual outcome: 456

TEST PASSED (+2 Cards) - expected outcome: 299 	 actual outcome: 299
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 121

TEST PASSED (+2 Cards) - expected outcome: 50 	 actual outcome: 50
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 56

TEST PASSED (+2 Cards) - expected outcome: 423 	 actual outcome: 423
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 89

TEST PASSED (+2 Cards) - expected outcome: 317 	 actual outcome: 317
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 419

TEST PASSED (+2 Cards) - expected outcome: 461 	 actual outcome: 461
TEST FAILED (+n Discard) - expected outcome: 72 	 actual outcome: 322

TEST PASSED (+2 Cards) - expected outcome: 399 	 actual outcome: 399
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 471

TEST PASSED (+2 Cards) - expected outcome: 26 	 actual outcome: 26
TEST FAILED (+n Discard) - expected outcome: 41 	 actual outcome: 94

TEST PASSED (+2 Cards) - expected outcome: 156 	 actual outcome: 156
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 352

TEST PASSED (+2 Cards) - expected outcome: 289 	 actual outcome: 289
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 196

TEST PASSED (+2 Cards) - expected outcome: 119 	 actual outcome: 119
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 23

TEST PASSED (+2 Cards) - expected outcome: 202 	 actual outcome: 202
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 272

TEST PASSED (+2 Cards) - expected outcome: 5 	 actual outcome: 5
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 438

TEST PASSED (+2 Cards) - expected outcome: 54 	 actual outcome: 54
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 82

TEST PASSED (+2 Cards) - expected outcome: 206 	 actual outcome: 206
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 493

TEST PASSED (+2 Cards) - expected outcome: 455 	 actual outcome: 455
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 404

TEST PASSED (+2 Cards) - expected outcome: 158 	 actual outcome: 158
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 479

TEST PASSED (+2 Cards) - expected outcome: 20 	 actual outcome: 20
TEST FAILED (+n Discard) - expected outcome: 35 	 actual outcome: 169

TEST PASSED (+2 Cards) - expected outcome: 232 	 actual outcome: 232
TEST FAILED (+n Discard) - expected outcome: 35 	 actual outcome: 406

TEST PASSED (+2 Cards) - expected outcome: 391 	 actual outcome: 391
TEST FAILED (+n Discard) - expected outcome: 45 	 actual outcome: 373

TEST PASSED (+2 Cards) - expected outcome: 328 	 actual outcome: 328
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 54

TEST PASSED (+2 Cards) - expected outcome: 19 	 actual outcome: 19
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 387

TEST PASSED (+2 Cards) - expected outcome: 81 	 actual outcome: 81
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 216

TEST PASSED (+2 Cards) - expected outcome: 9 	 actual outcome: 9
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 495

TEST PASSED (+2 Cards) - expected outcome: 151 	 actual outcome: 151
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 224

TEST FAILED (+2 Cards) - expected outcome: 463 	 actual outcome: 462
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 115

TEST PASSED (+2 Cards) - expected outcome: 390 	 actual outcome: 390
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 366

TEST PASSED (+2 Cards) - expected outcome: 464 	 actual outcome: 464
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 223

TEST PASSED (+2 Cards) - expected outcome: 257 	 actual outcome: 257
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 315

TEST PASSED (+2 Cards) - expected outcome: 24 	 actual outcome: 24
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 259

TEST PASSED (+2 Cards) - expected outcome: 139 	 actual outcome: 139
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 460

TEST PASSED (+2 Cards) - expected outcome: 411 	 actual outcome: 411
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 288

TEST PASSED (+2 Cards) - expected outcome: 124 	 actual outcome: 124
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 93

TEST PASSED (+2 Cards) - expected outcome: 20 	 actual outcome: 20
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 510

TEST PASSED (+2 Cards) - expected outcome: 363 	 actual outcome: 363
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 504

TEST PASSED (+2 Cards) - expected outcome: 455 	 actual outcome: 455
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 444

TEST PASSED (+2 Cards) - expected outcome: 193 	 actual outcome: 193
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 406

TEST PASSED (+2 Cards) - expected outcome: 446 	 actual outcome: 446
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 258

TEST PASSED (+2 Cards) - expected outcome: 105 	 actual outcome: 105
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 178

TEST PASSED (+2 Cards) - expected outcome: 419 	 actual outcome: 419
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 53

TEST PASSED (+2 Cards) - expected outcome: 278 	 actual outcome: 278
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 244

TEST PASSED (+2 Cards) - expected outcome: 224 	 actual outcome: 224
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 394

TEST PASSED (+2 Cards) - expected outcome: 378 	 actual outcome: 378
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 267

TEST PASSED (+2 Cards) - expected outcome: 440 	 actual outcome: 440
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 277

TEST PASSED (+2 Cards) - expected outcome: 89 	 actual outcome: 89
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 131

TEST PASSED (+2 Cards) - expected outcome: 361 	 actual outcome: 361
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 376

TEST PASSED (+2 Cards) - expected outcome: 449 	 actual outcome: 449
TEST FAILED (+n Discard) - expected outcome: 49 	 actual outcome: 236

TEST PASSED (+2 Cards) - expected outcome: 375 	 actual outcome: 375
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 32

TEST PASSED (+2 Cards) - expected outcome: 8 	 actual outcome: 8
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 514

TEST PASSED (+2 Cards) - expected outcome: 414 	 actual outcome: 414
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 205

TEST PASSED (+2 Cards) - expected outcome: 436 	 actual outcome: 436
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 93

TEST PASSED (+2 Cards) - expected outcome: 116 	 actual outcome: 116
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 39

TEST PASSED (+2 Cards) - expected outcome: 167 	 actual outcome: 167
TEST FAILED (+n Discard) - expected outcome: 37 	 actual outcome: 488

TEST PASSED (+2 Cards) - expected outcome: 112 	 actual outcome: 112
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 194

TEST PASSED (+2 Cards) - expected outcome: 461 	 actual outcome: 461
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 180

TEST PASSED (+2 Cards) - expected outcome: 126 	 actual outcome: 126
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 432

TEST PASSED (+2 Cards) - expected outcome: 56 	 actual outcome: 56
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 184

TEST PASSED (+2 Cards) - expected outcome: 107 	 actual outcome: 107
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 467

TEST PASSED (+2 Cards) - expected outcome: 251 	 actual outcome: 251
TEST FAILED (+n Discard) - expected outcome: 37 	 actual outcome: 71

TEST PASSED (+2 Cards) - expected outcome: 99 	 actual outcome: 99
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 452

TEST PASSED (+2 Cards) - expected outcome: 299 	 actual outcome: 299
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 455

TEST PASSED (+2 Cards) - expected outcome: 87 	 actual outcome: 87
TEST FAILED (+n Discard) - expected outcome: 42 	 actual outcome: 444

TEST PASSED (+2 Cards) - expected outcome: 61 	 actual outcome: 61
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 287

TEST PASSED (+2 Cards) - expected outcome: 389 	 actual outcome: 389
TEST FAILED (+n Discard) - expected outcome: 46 	 actual outcome: 101

TEST PASSED (+2 Cards) - expected outcome: 267 	 actual outcome: 267
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 115

TEST PASSED (+2 Cards) - expected outcome: 24 	 actual outcome: 24
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 27

TEST PASSED (+2 Cards) - expected outcome: 179 	 actual outcome: 179
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 316

TEST PASSED (+2 Cards) - expected outcome: 54 	 actual outcome: 54
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 470

TEST PASSED (+2 Cards) - expected outcome: 399 	 actual outcome: 399
TEST FAILED (+n Discard) - expected outcome: 49 	 actual outcome: 518

TEST PASSED (+2 Cards) - expected outcome: 310 	 actual outcome: 310
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 73

TEST PASSED (+2 Cards) - expected outcome: 418 	 actual outcome: 418
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 401

TEST PASSED (+2 Cards) - expected outcome: 84 	 actual outcome: 84
TEST FAILED (+n Discard) - expected outcome: 87 	 actual outcome: 374

TEST PASSED (+2 Cards) - expected outcome: 398 	 actual outcome: 398
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 335

TEST PASSED (+2 Cards) - expected outcome: 455 	 actual outcome: 455
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 175

TEST PASSED (+2 Cards) - expected outcome: 286 	 actual outcome: 286
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 301

TEST PASSED (+2 Cards) - expected outcome: 110 	 actual outcome: 110
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 469

TEST PASSED (+2 Cards) - expected outcome: 255 	 actual outcome: 255
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 150

TEST PASSED (+2 Cards) - expected outcome: 139 	 actual outcome: 139
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 25

TEST PASSED (+2 Cards) - expected outcome: 231 	 actual outcome: 231
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 318

TEST PASSED (+2 Cards) - expected outcome: 492 	 actual outcome: 492
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 443

TEST PASSED (+2 Cards) - expected outcome: 157 	 actual outcome: 157
TEST FAILED (+n Discard) - expected outcome: 55 	 actual outcome: 148

TEST PASSED (+2 Cards) - expected outcome: 168 	 actual outcome: 168
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 275

TEST PASSED (+2 Cards) - expected outcome: 156 	 actual outcome: 156
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 273

TEST PASSED (+2 Cards) - expected outcome: 157 	 actual outcome: 157
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 169

TEST PASSED (+2 Cards) - expected outcome: 347 	 actual outcome: 347
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 32

TEST PASSED (+2 Cards) - expected outcome: 265 	 actual outcome: 265
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 211

TEST PASSED (+2 Cards) - expected outcome: 21 	 actual outcome: 21
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 323

TEST PASSED (+2 Cards) - expected outcome: 278 	 actual outcome: 278
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 170

TEST PASSED (+2 Cards) - expected outcome: 182 	 actual outcome: 182
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 373

TEST PASSED (+2 Cards) - expected outcome: 157 	 actual outcome: 157
TEST FAILED (+n Discard) - expected outcome: 80 	 actual outcome: 122

TEST PASSED (+2 Cards) - expected outcome: 53 	 actual outcome: 53
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 195

TEST PASSED (+2 Cards) - expected outcome: 446 	 actual outcome: 446
TEST FAILED (+n Discard) - expected outcome: 53 	 actual outcome: 449

TEST PASSED (+2 Cards) - expected outcome: 360 	 actual outcome: 360
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 186

TEST PASSED (+2 Cards) - expected outcome: 470 	 actual outcome: 470
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 92

TEST PASSED (+2 Cards) - expected outcome: 441 	 actual outcome: 441
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 116

TEST PASSED (+2 Cards) - expected outcome: 211 	 actual outcome: 211
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 286

TEST PASSED (+2 Cards) - expected outcome: 322 	 actual outcome: 322
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 413

TEST PASSED (+2 Cards) - expected outcome: 407 	 actual outcome: 407
TEST FAILED (+n Discard) - expected outcome: 48 	 actual outcome: 309

TEST PASSED (+2 Cards) - expected outcome: 223 	 actual outcome: 223
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 131

TEST PASSED (+2 Cards) - expected outcome: 57 	 actual outcome: 57
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 159

TEST PASSED (+2 Cards) - expected outcome: 120 	 actual outcome: 120
TEST FAILED (+n Discard) - expected outcome: 61 	 actual outcome: 546

TEST PASSED (+2 Cards) - expected outcome: 445 	 actual outcome: 445
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 326

TEST PASSED (+2 Cards) - expected outcome: 251 	 actual outcome: 251
TEST FAILED (+n Discard) - expected outcome: 52 	 actual outcome: 195

TEST PASSED (+2 Cards) - expected outcome: 262 	 actual outcome: 262
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 233

TEST PASSED (+2 Cards) - expected outcome: 101 	 actual outcome: 101
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 427

TEST PASSED (+2 Cards) - expected outcome: 85 	 actual outcome: 85
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 438

TEST PASSED (+2 Cards) - expected outcome: 377 	 actual outcome: 377
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 419

TEST PASSED (+2 Cards) - expected outcome: 84 	 actual outcome: 84
TEST FAILED (+n Discard) - expected outcome: 89 	 actual outcome: 448

TEST PASSED (+2 Cards) - expected outcome: 474 	 actual outcome: 474
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 80

TEST PASSED (+2 Cards) - expected outcome: 22 	 actual outcome: 22
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 146

TEST PASSED (+2 Cards) - expected outcome: 399 	 actual outcome: 399
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 399

TEST PASSED (+2 Cards) - expected outcome: 480 	 actual outcome: 480
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 126

TEST PASSED (+2 Cards) - expected outcome: 427 	 actual outcome: 427
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 166

TEST PASSED (+2 Cards) - expected outcome: 167 	 actual outcome: 167
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 110

TEST PASSED (+2 Cards) - expected outcome: 149 	 actual outcome: 149
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 162

TEST PASSED (+2 Cards) - expected outcome: 488 	 actual outcome: 488
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 162

TEST PASSED (+2 Cards) - expected outcome: 255 	 actual outcome: 255
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 127

TEST PASSED (+2 Cards) - expected outcome: 263 	 actual outcome: 263
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 71

TEST PASSED (+2 Cards) - expected outcome: 94 	 actual outcome: 94
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 139

TEST PASSED (+2 Cards) - expected outcome: 394 	 actual outcome: 394
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 499

TEST PASSED (+2 Cards) - expected outcome: 173 	 actual outcome: 173
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 328

TEST PASSED (+2 Cards) - expected outcome: 249 	 actual outcome: 249
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 62

TEST PASSED (+2 Cards) - expected outcome: 402 	 actual outcome: 402
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 192

TEST PASSED (+2 Cards) - expected outcome: 89 	 actual outcome: 89
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 245

TEST PASSED (+2 Cards) - expected outcome: 324 	 actual outcome: 324
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 320

TEST PASSED (+2 Cards) - expected outcome: 112 	 actual outcome: 112
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 380

TEST PASSED (+2 Cards) - expected outcome: 282 	 actual outcome: 282
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 183

TEST PASSED (+2 Cards) - expected outcome: 31 	 actual outcome: 31
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 449

TEST PASSED (+2 Cards) - expected outcome: 208 	 actual outcome: 208
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 99

TEST PASSED (+2 Cards) - expected outcome: 10 	 actual outcome: 10
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 319

TEST PASSED (+2 Cards) - expected outcome: 369 	 actual outcome: 369
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 187

TEST PASSED (+2 Cards) - expected outcome: 416 	 actual outcome: 416
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 367

TEST PASSED (+2 Cards) - expected outcome: 247 	 actual outcome: 247
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 413

TEST PASSED (+2 Cards) - expected outcome: 163 	 actual outcome: 163
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 157

TEST PASSED (+2 Cards) - expected outcome: 33 	 actual outcome: 33
TEST FAILED (+n Discard) - expected outcome: 59 	 actual outcome: 258

TEST PASSED (+2 Cards) - expected outcome: 5 	 actual outcome: 5
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 131

TEST PASSED (+2 Cards) - expected outcome: 229 	 actual outcome: 229
TEST FAILED (+n Discard) - expected outcome: 56 	 actual outcome: 439

TEST PASSED (+2 Cards) - expected outcome: 487 	 actual outcome: 487
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 59

TEST PASSED (+2 Cards) - expected outcome: 136 	 actual outcome: 136
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 438

TEST PASSED (+2 Cards) - expected outcome: 440 	 actual outcome: 440
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 257

TEST PASSED (+2 Cards) - expected outcome: 199 	 actual outcome: 199
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 412

TEST PASSED (+2 Cards) - expected outcome: 153 	 actual outcome: 153
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 440

TEST PASSED (+2 Cards) - expected outcome: 354 	 actual outcome: 354
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 38

TEST PASSED (+2 Cards) - expected outcome: 15 	 actual outcome: 15
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 395

TEST PASSED (+2 Cards) - expected outcome: 108 	 actual outcome: 108
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 233

TEST PASSED (+2 Cards) - expected outcome: 393 	 actual outcome: 393
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 433

TEST PASSED (+2 Cards) - expected outcome: 278 	 actual outcome: 278
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 130

TEST PASSED (+2 Cards) - expected outcome: 15 	 actual outcome: 15
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 170

TEST PASSED (+2 Cards) - expected outcome: 64 	 actual outcome: 64
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 53

TEST PASSED (+2 Cards) - expected outcome: 78 	 actual outcome: 78
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 436

TEST PASSED (+2 Cards) - expected outcome: 39 	 actual outcome: 39
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 448

TEST PASSED (+2 Cards) - expected outcome: 263 	 actual outcome: 263
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 218

TEST PASSED (+2 Cards) - expected outcome: 296 	 actual outcome: 296
TEST FAILED (+n Discard) - expected outcome: 4 	 actual outcome: 181

TEST PASSED (+2 Cards) - expected outcome: 190 	 actual outcome: 190
TEST FAILED (+n Discard) - expected outcome: 76 	 actual outcome: 135

TEST PASSED (+2 Cards) - expected outcome: 61 	 actual outcome: 61
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 200

TEST PASSED (+2 Cards) - expected outcome: 417 	 actual outcome: 417
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 20

TEST PASSED (+2 Cards) - expected outcome: 443 	 actual outcome: 443
TEST FAILED (+n Discard) - expected outcome: 32 	 actual outcome: 418

TEST PASSED (+2 Cards) - expected outcome: 379 	 actual outcome: 379
TEST FAILED (+n Discard) - expected outcome: 38 	 actual outcome: 158

TEST PASSED (+2 Cards) - expected outcome: 481 	 actual outcome: 481
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 153

TEST PASSED (+2 Cards) - expected outcome: 204 	 actual outcome: 204
TEST FAILED (+n Discard) - expected outcome: 1 	 actual outcome: 258

TEST PASSED (+2 Cards) - expected outcome: 101 	 actual outcome: 101
TEST FAILED (+n Discard) - expected outcome: 10 	 actual outcome: 288

TEST PASSED (+2 Cards) - expected outcome: 88 	 actual outcome: 88
TEST FAILED (+n Discard) - expected outcome: 56 	 actual outcome: 374

TEST PASSED (+2 Cards) - expected outcome: 211 	 actual outcome: 211
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 196

TEST PASSED (+2 Cards) - expected outcome: 145 	 actual outcome: 145
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 218

TEST PASSED (+2 Cards) - expected outcome: 143 	 actual outcome: 143
TEST FAILED (+n Discard) - expected outcome: 52 	 actual outcome: 419

TEST PASSED (+2 Cards) - expected outcome: 366 	 actual outcome: 366
TEST FAILED (+n Discard) - expected outcome: 53 	 actual outcome: 93

TEST PASSED (+2 Cards) - expected outcome: 329 	 actual outcome: 329
TEST FAILED (+n Discard) - expected outcome: 14 	 actual outcome: 164

TEST PASSED (+2 Cards) - expected outcome: 257 	 actual outcome: 257
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 389

TEST PASSED (+2 Cards) - expected outcome: 330 	 actual outcome: 330
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 440

TEST PASSED (+2 Cards) - expected outcome: 289 	 actual outcome: 289
TEST FAILED (+n Discard) - expected outcome: 47 	 actual outcome: 546

TEST PASSED (+2 Cards) - expected outcome: 461 	 actual outcome: 461
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 55

TEST PASSED (+2 Cards) - expected outcome: 270 	 actual outcome: 270
TEST FAILED (+n Discard) - expected outcome: 30 	 actual outcome: 155

TEST PASSED (+2 Cards) - expected outcome: 357 	 actual outcome: 357
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 489

TEST PASSED (+2 Cards) - expected outcome: 244 	 actual outcome: 244
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 145

TEST PASSED (+2 Cards) - expected outcome: 14 	 actual outcome: 14
TEST FAILED (+n Discard) - expected outcome: 23 	 actual outcome: 440

TEST PASSED (+2 Cards) - expected outcome: 333 	 actual outcome: 333
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 349

TEST PASSED (+2 Cards) - expected outcome: 188 	 actual outcome: 188
TEST FAILED (+n Discard) - expected outcome: 70 	 actual outcome: 391

TEST PASSED (+2 Cards) - expected outcome: 270 	 actual outcome: 270
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 245

TEST PASSED (+2 Cards) - expected outcome: 24 	 actual outcome: 24
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 490

TEST PASSED (+2 Cards) - expected outcome: 68 	 actual outcome: 68
TEST FAILED (+n Discard) - expected outcome: 31 	 actual outcome: 493

TEST PASSED (+2 Cards) - expected outcome: 342 	 actual outcome: 342
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 79

TEST PASSED (+2 Cards) - expected outcome: 450 	 actual outcome: 450
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 135

TEST PASSED (+2 Cards) - expected outcome: 427 	 actual outcome: 427
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 26

TEST PASSED (+2 Cards) - expected outcome: 80 	 actual outcome: 80
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 106

TEST PASSED (+2 Cards) - expected outcome: 166 	 actual outcome: 166
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 428

TEST PASSED (+2 Cards) - expected outcome: 475 	 actual outcome: 475
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 91

TEST PASSED (+2 Cards) - expected outcome: 400 	 actual outcome: 400
TEST FAILED (+n Discard) - expected outcome: 11 	 actual outcome: 417

TEST PASSED (+2 Cards) - expected outcome: 473 	 actual outcome: 473
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 394

TEST PASSED (+2 Cards) - expected outcome: 14 	 actual outcome: 14
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 508

TEST PASSED (+2 Cards) - expected outcome: 386 	 actual outcome: 386
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 223

TEST PASSED (+2 Cards) - expected outcome: 479 	 actual outcome: 479
TEST FAILED (+n Discard) - expected outcome: 53 	 actual outcome: 519

TEST PASSED (+2 Cards) - expected outcome: 369 	 actual outcome: 369
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 276

TEST PASSED (+2 Cards) - expected outcome: 309 	 actual outcome: 309
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 345

TEST FAILED (+2 Cards) - expected outcome: 431 	 actual outcome: 430
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 107

TEST PASSED (+2 Cards) - expected outcome: 237 	 actual outcome: 237
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 129

TEST PASSED (+2 Cards) - expected outcome: 131 	 actual outcome: 131
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 50

TEST PASSED (+2 Cards) - expected outcome: 96 	 actual outcome: 96
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 295

TEST PASSED (+2 Cards) - expected outcome: 121 	 actual outcome: 121
TEST FAILED (+n Discard) - expected outcome: 17 	 actual outcome: 111

TEST PASSED (+2 Cards) - expected outcome: 186 	 actual outcome: 186
TEST FAILED (+n Discard) - expected outcome: 48 	 actual outcome: 225

TEST PASSED (+2 Cards) - expected outcome: 468 	 actual outcome: 468
TEST FAILED (+n Discard) - expected outcome: 25 	 actual outcome: 390

TEST PASSED (+2 Cards) - expected outcome: 72 	 actual outcome: 72
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 348

TEST PASSED (+2 Cards) - expected outcome: 75 	 actual outcome: 75
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 387

TEST PASSED (+2 Cards) - expected outcome: 421 	 actual outcome: 421
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 149

TEST PASSED (+2 Cards) - expected outcome: 289 	 actual outcome: 289
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 469

TEST PASSED (+2 Cards) - expected outcome: 492 	 actual outcome: 492
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 313

TEST PASSED (+2 Cards) - expected outcome: 265 	 actual outcome: 265
TEST FAILED (+n Discard) - expected outcome: 18 	 actual outcome: 516

TEST PASSED (+2 Cards) - expected outcome: 238 	 actual outcome: 238
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 248

TEST PASSED (+2 Cards) - expected outcome: 45 	 actual outcome: 45
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 351

TEST PASSED (+2 Cards) - expected outcome: 83 	 actual outcome: 83
TEST FAILED (+n Discard) - expected outcome: 26 	 actual outcome: 524

TEST PASSED (+2 Cards) - expected outcome: 276 	 actual outcome: 276
TEST FAILED (+n Discard) - expected outcome: 16 	 actual outcome: 422

TEST PASSED (+2 Cards) - expected outcome: 335 	 actual outcome: 335
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 306

TEST PASSED (+2 Cards) - expected outcome: 305 	 actual outcome: 305
TEST FAILED (+n Discard) - expected outcome: 19 	 actual outcome: 244

TEST PASSED (+2 Cards) - expected outcome: 477 	 actual outcome: 477
TEST FAILED (+n Discard) - expected outcome: 22 	 actual outcome: 413

TEST PASSED (+2 Cards) - expected outcome: 139 	 actual outcome: 139
TEST FAILED (+n Discard) - expected outcome: 9 	 actual outcome: 469

TEST PASSED (+2 Cards) - expected outcome: 72 	 actual outcome: 72
TEST FAILED (+n Discard) - expected outcome: 40 	 actual outcome: 200

TEST PASSED (+2 Cards) - expected outcome: 385 	 actual outcome: 385
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 187

TEST PASSED (+2 Cards) - expected outcome: 36 	 actual outcome: 36
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 193

TEST PASSED (+2 Cards) - expected outcome: 204 	 actual outcome: 204
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 403

TEST PASSED (+2 Cards) - expected outcome: 268 	 actual outcome: 268
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 410

TEST PASSED (+2 Cards) - expected outcome: 346 	 actual outcome: 346
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 79

TEST PASSED (+2 Cards) - expected outcome: 28 	 actual outcome: 28
TEST FAILED (+n Discard) - expected outcome: 33 	 actual outcome: 56

TEST PASSED (+2 Cards) - expected outcome: 294 	 actual outcome: 294
TEST FAILED (+n Discard) - expected outcome: 21 	 actual outcome: 100

TEST PASSED (+2 Cards) - expected outcome: 419 	 actual outcome: 419
TEST FAILED (+n Discard) - expected outcome: 5 	 actual outcome: 187

TEST PASSED (+2 Cards) - expected outcome: 198 	 actual outcome: 198
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 296

TEST PASSED (+2 Cards) - expected outcome: 369 	 actual outcome: 369
TEST FAILED (+n Discard) - expected outcome: 39 	 actual outcome: 297

TEST PASSED (+2 Cards) - expected outcome: 210 	 actual outcome: 210
TEST FAILED (+n Discard) - expected outcome: 36 	 actual outcome: 210

TEST PASSED (+2 Cards) - expected outcome: 25 	 actual outcome: 25
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 237

TEST PASSED (+2 Cards) - expected outcome: 441 	 actual outcome: 441
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 414

TEST PASSED (+2 Cards) - expected outcome: 92 	 actual outcome: 92
TEST FAILED (+n Discard) - expected outcome: 20 	 actual outcome: 95

TEST PASSED (+2 Cards) - expected outcome: 184 	 actual outcome: 184
TEST FAILED (+n Discard) - expected outcome: 40 	 actual outcome: 248

TEST PASSED (+2 Cards) - expected outcome: 144 	 actual outcome: 144
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 322

TEST PASSED (+2 Cards) - expected outcome: 112 	 actual outcome: 112
TEST FAILED (+n Discard) - expected outcome: 24 	 actual outcome: 308

TEST PASSED (+2 Cards) - expected outcome: 211 	 actual outcome: 211
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 376

TEST PASSED (+2 Cards) - expected outcome: 391 	 actual outcome: 391
TEST FAILED (+n Discard) - expected outcome: 15 	 actual outcome: 196

TEST PASSED (+2 Cards) - expected outcome: 494 	 actual outcome: 494
TEST FAILED (+n Discard) - expected outcome: 2 	 actual outcome: 417

TEST PASSED (+2 Cards) - expected outcome: 258 	 actual outcome: 258
TEST FAILED (+n Discard) - expected outcome: 29 	 actual outcome: 161

TEST PASSED (+2 Cards) - expected outcome: 171 	 actual outcome: 171
TEST FAILED (+n Discard) - expected outcome: 13 	 actual outcome: 132

TEST PASSED (+2 Cards) - expected outcome: 158 	 actual outcome: 158
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 115

TEST PASSED (+2 Cards) - expected outcome: 354 	 actual outcome: 354
TEST FAILED (+n Discard) - expected outcome: 6 	 actual outcome: 392

TEST PASSED (+2 Cards) - expected outcome: 439 	 actual outcome: 439
TEST FAILED (+n Discard) - expected outcome: 3 	 actual outcome: 52

TEST PASSED (+2 Cards) - expected outcome: 62 	 actual outcome: 62
TEST FAILED (+n Discard) - expected outcome: 36 	 actual outcome: 195

TEST PASSED (+2 Cards) - expected outcome: 302 	 actual outcome: 302
TEST FAILED (+n Discard) - expected outcome: 7 	 actual outcome: 106

TEST PASSED (+2 Cards) - expected outcome: 465 	 actual outcome: 465
TEST FAILED (+n Discard) - expected outcome: 12 	 actual outcome: 75

TEST PASSED (+2 Cards) - expected outcome: 101 	 actual outcome: 101
TEST FAILED (+n Discard) - expected outcome: 0 	 actual outcome: 407

TEST PASSED (+2 Cards) - expected outcome: 251 	 actual outcome: 251
TEST FAILED (+n Discard) - expected outcome: 28 	 actual outcome: 423

TEST PASSED (+2 Cards) - expected outcome: 36 	 actual outcome: 36
TEST FAILED (+n Discard) - expected outcome: 8 	 actual outcome: 500

TEST PASSED (+2 Cards) - expected outcome: 280 	 actual outcome: 280
TEST FAILED (+n Discard) - expected outcome: 84 	 actual outcome: 116

TEST PASSED (+2 Cards) - expected outcome: 306 	 actual outcome: 306
TEST FAILED (+n Discard) - expected outcome: 41 	 actual outcome: 259

TEST PASSED (+2 Cards) - expected outcome: 348 	 actual outcome: 348
TEST FAILED (+n Discard) - expected outcome: 27 	 actual outcome: 327

TEST PASSED (+2 Cards) - expected outcome: 470 	 actual outcome: 470
TEST FAILED (+n Discard) - expected outcome: 37 	 actual outcome: 315

ALL TESTS OK


Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:0.00% of 78
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'handleSmithyCardEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'handleAdventurerCardEffect'
Lines executed:100.00% of 14
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
No calls

Function 'handleCouncilRoomCardEffect'
Lines executed:0.00% of 10
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'handleRemodelCardEffect'
Lines executed:0.00% of 12
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'handleFeastCardEffect'
Lines executed:0.00% of 21
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'handleGreatHallCardEffect'
Lines executed:100.00% of 4
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 230
Branches executed:0.00% of 163
Taken at least once:0.00% of 163
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:0.00% of 14
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

File 'dominion.c'
Lines executed:12.54% of 646
Branches executed:8.63% of 417
Taken at least once:7.67% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6604 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     6604:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 53%
branch  1 taken 47%
     3485:   10:    return 1;
     3119:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 100%
branch  1 taken 0%
     3119:   12:    return -1;
    #####:   13:  return 0;
     6604:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    #####:   65:        }
    #####:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    #####:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    #####:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    #####:  130:	}
        -:  131:
    #####:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
    #####:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
    #####:  150:	}
    #####:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
branch  0 never executed
branch  1 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    #####:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    #####:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
    #####:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
    #####:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
    #####:  199:}
        -:  200:
function shuffle called 16 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
branch  0 taken 75%
branch  1 taken 25%
       12:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1656:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
      824:  215:    card = floor(Random() * state->deckCount[player]);
      824:  216:    newDeck[newDeckPos] = state->deck[player][card];
      824:  217:    newDeckPos++;
   112202:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
    55277:  219:      state->deck[player][i] = state->deck[player][i+1];
    55277:  220:    }
      824:  221:    state->deckCount[player]--;
        -:  222:  }
     1656:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
      824:  224:    state->deck[player][i] = newDeck[i];
      824:  225:    state->deckCount[player]++;
      824:  226:  }
        -:  227:
        4:  228:  return 0;
       16:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 13533 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    13533:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1664:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
      824:  534:      state->deck[player][i] = state->discard[player][i];
      824:  535:      state->discard[player][i] = -1;
      824:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 50%
branch  1 taken 50%
        4:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        4:  565:  }
        -:  566:
        -:  567:  else{
    13525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    13525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13525:  576:    state->deckCount[player]--;
    13525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    13529:  580:  return 0;
    13533:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function handleSmithyCardEffect called 500 returned 100% blocks executed 100%
        -:  646:int handleSmithyCardEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  647:{
        -:  648:  int i;
        -:  649:  //+3 Cards
     3000:  650:  for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  651:	{
     1000:  652:	  drawCard(currentPlayer, state);
     1000:  653:	}
        -:  654:
        -:  655:  //discard card from hand
      500:  656:  discardCard(handPos, currentPlayer, state, 0);
        -:  657:
      500:  658:  return 0;
        -:  659:}
        -:  660:
function handleAdventurerCardEffect called 500 returned 100% blocks executed 100%
        -:  661:int handleAdventurerCardEffect(int drawnTreasure, struct gameState *state, int currentPlayer, int tempHand[], int z)
        -:  662:{
        -:  663:  int cardDrawn;
    25066:  664:  while (drawnTreasure < 2)
branch  0 taken 96%
branch  1 taken 4%
        -:  665:  {
    12033:  666:    if (state->deckCount[currentPlayer] < 1)  // if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        8:  667:      shuffle(currentPlayer, state);
        -:  668:
    12033:  669:    drawCard(currentPlayer, state);
    12033:  670:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];  // top card of hand is most recently drawn card.
        -:  671:
    23606:  672:    if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 5%
branch  3 taken 95%
     1000:  673:      drawnTreasure++;
        -:  674:    else
        -:  675:    {
    11033:  676:      tempHand[z] = cardDrawn;
    11033:  677:      state->handCount[currentPlayer]--;  // this should just remove the top card (the most recently drawn one).
    11033:  678:      z++;
        -:  679:    }
        -:  680:  }
        -:  681:
    23066:  682:  while (z - 1 >= 0) {
branch  0 taken 96%
branch  1 taken 4%
    11033:  683:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - 1];  // discard all cards in play that have been drawn
    11033:  684:    z = z - 1;
        -:  685:  }
        -:  686:
      500:  687:  return 0;
        -:  688:}
        -:  689:
function handleCouncilRoomCardEffect called 0 returned 0% blocks executed 0%
        -:  690:int handleCouncilRoomCardEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  691:{
        -:  692:  int i;
        -:  693:
        -:  694:  // +4 Cards
    #####:  695:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  696:	{
    #####:  697:	  drawCard(currentPlayer, state);
    #####:  698:	}
        -:  699:
        -:  700:  // +1 Buy
    #####:  701:  state->numBuys++;
        -:  702:
        -:  703:  // Each other player draws a card
    #####:  704:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
    #####:  707:      drawCard(i, state);
    #####:  708:	}
        -:  709:
        -:  710:  // put played card in played card pile
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
        -:  712:
    #####:  713:  return 0;
        -:  714:}
        -:  715:
function handleRemodelCardEffect called 0 returned 0% blocks executed 0%
        -:  716:int handleRemodelCardEffect(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  717:{
        -:  718:  int i;
        -:  719:  int j;
        -:  720:
    #####:  721:  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  722:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
    #####:  723:	  return -1;
        -:  724:
    #####:  725:  gainCard(choice2, state, 0, currentPlayer);
        -:  726:
        -:  727:  //discard card from hand
    #####:  728:  discardCard(handPos, currentPlayer, state, 0);
        -:  729:
        -:  730:  //discard trashed card
    #####:  731:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  732:	{
    #####:  733:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  734:	    {
    #####:  735:	      discardCard(i, currentPlayer, state, 0);
    #####:  736:	      break;
        -:  737:	    }
    #####:  738:	}
        -:  739:
    #####:  740:  return 0;
    #####:  741:}
        -:  742:
function handleFeastCardEffect called 0 returned 0% blocks executed 0%
        -:  743:int handleFeastCardEffect(struct gameState *state, int currentPlayer, int tempHand[], int choice1)
        -:  744:{
        -:  745:  // gain card with cost up to 5
        -:  746:
        -:  747:  int i;
        -:  748:  int x;
        -:  749:
        -:  750:  // Backup hand
    #####:  751:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  752:  {
    #####:  753:    tempHand[i] = state->hand[currentPlayer][i];  // Backup card
    #####:  754:    state->hand[currentPlayer][i] = -1;  // Set to nothing
    #####:  755:  }
        -:  756:
        -:  757:  // Update Coins for Buy
    #####:  758:  updateCoins(currentPlayer, state, 5);
        -:  759:
    #####:  760:  x = 1;  // Condition to loop on
    #####:  761:  while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  762:  {  // Buy one card
    #####:  763:    if (supplyCount(choice1, state) <= 0 && DEBUG)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  764:    {
    #####:  765:      printf("None of that card left, sorry!\n");
    #####:  766:      printf("Cards Left: %d\n", supplyCount(choice1, state));
    #####:  767:	  }
    #####:  768:    else if (state->coins < getCost(choice1))
branch  0 never executed
branch  1 never executed
        -:  769:    {
    #####:  770:      printf("That card is too expensive!\n");
        -:  771:
        -:  772:      if (DEBUG)
        -:  773:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
    #####:  774:    }
        -:  775:    else
        -:  776:    {
        -:  777:      if (DEBUG)
        -:  778:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  779:
    #####:  780:      gainCard(choice1, state, 0, currentPlayer);  // Gain the card
    #####:  781:      x = 0;  // No more buying cards
        -:  782:
        -:  783:      if (DEBUG)
        -:  784:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  785:    }
        -:  786:  }
        -:  787:
        -:  788:  // Reset Hand
    #####:  789:  for (i = 0; i <= state->handCount[currentPlayer] - 1; i++)
branch  0 never executed
branch  1 never executed
        -:  790:  {
    #####:  791:    state->hand[currentPlayer][i] = tempHand[i];
    #####:  792:    tempHand[i] = -1;
    #####:  793:  }
        -:  794:
    #####:  795:  return 0;
        -:  796:}
        -:  797:
function handleGreatHallCardEffect called 500 returned 100% blocks executed 100%
        -:  798:int handleGreatHallCardEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  799:{
        -:  800:    //+1 Card
      500:  801:    drawCard(currentPlayer, state);
        -:  802:
        -:  803:    //+1 Actions
      500:  804:    state->numActions++;
        -:  805:
        -:  806:    //discard card from hand
      500:  807:    discardCard(handPos, currentPlayer, state, 0);
      500:  808:    return 0;
        -:  809:}
        -:  810:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int index;
    #####:  817:  int currentPlayer = whoseTurn(state);
    #####:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
    #####:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
    #####:  822:  int drawntreasure=0;
    #####:  823:  int z = 0;// this is the counter for the temp hand
    #####:  824:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  825:    nextPlayer = 0;
    #####:  826:  }
        -:  827:  
        -:  828:	
        -:  829:  //uses switch to select card and perform actions
    #####:  830:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  831:    {
        -:  832:    case adventurer:
    #####:  833:      return handleAdventurerCardEffect(drawntreasure, state, currentPlayer, temphand, z);
        -:  834:			
        -:  835:    case council_room:
    #####:  836:      return handleCouncilRoomCardEffect(currentPlayer, state, handPos);
        -:  837:			
        -:  838:    case feast:
    #####:  839:      return handleFeastCardEffect(state, currentPlayer, temphand, choice1);
        -:  840:			
        -:  841:    case gardens:
    #####:  842:      return -1;
        -:  843:			
        -:  844:    case mine:
    #####:  845:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  846:
    #####:  847:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:		
    #####:  852:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  853:	{
    #####:  854:	  return -1;
        -:  855:	}
        -:  856:
    #####:  857:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  858:	{
    #####:  859:	  return -1;
        -:  860:	}
        -:  861:
    #####:  862:      gainCard(choice2, state, 2, currentPlayer);
        -:  863:
        -:  864:      //discard card from hand
    #####:  865:      discardCard(handPos, currentPlayer, state, 0);
        -:  866:
        -:  867:      //discard trashed card
    #####:  868:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      discardCard(i, currentPlayer, state, 0);			
    #####:  873:	      break;
        -:  874:	    }
    #####:  875:	}
        -:  876:			
    #####:  877:      return 0;
        -:  878:			
        -:  879:    case remodel:
    #####:  880:      return handleRemodelCardEffect(state, currentPlayer, choice1, choice2, handPos);
        -:  881:		
        -:  882:    case smithy:
    #####:  883:      return handleSmithyCardEffect(currentPlayer, state, handPos);
        -:  884:		
        -:  885:    case village:
        -:  886:      //+1 Card
    #####:  887:      drawCard(currentPlayer, state);
        -:  888:			
        -:  889:      //+2 Actions
    #####:  890:      state->numActions = state->numActions + 2;
        -:  891:			
        -:  892:      //discard played card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
    #####:  894:      return 0;
        -:  895:		
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
    #####:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:		isGameOver(state);
    #####:  923:	      }
    #####:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
    #####:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
    #####:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  939:	    isGameOver(state);
    #####:  940:	  }
    #####:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
    #####:  948:      return handleGreatHallCardEffect(currentPlayer, state, handPos);
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  state->coins = state->coins + 2;
    #####:  960:	}
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  963:	{
        -:  964:	  //discard hand
    #####:  965:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  966:	    {
    #####:  967:	      discardCard(handPos, currentPlayer, state, 0);
        -:  968:	    }
        -:  969:				
        -:  970:	  //draw 4
    #####:  971:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  972:	    {
    #####:  973:	      drawCard(currentPlayer, state);
    #####:  974:	    }
        -:  975:				
        -:  976:	  //other players discard hand and redraw if hand size > 4
    #####:  977:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  980:		{
    #####:  981:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  982:		    {
        -:  983:		      //discard hand
    #####:  984:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  985:			{
    #####:  986:			  discardCard(handPos, i, state, 0);
        -:  987:			}
        -:  988:							
        -:  989:		      //draw 4
    #####:  990:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  991:			{
    #####:  992:			  drawCard(i, state);
    #####:  993:			}
    #####:  994:		    }
    #####:  995:		}
    #####:  996:	    }
        -:  997:				
    #####:  998:	}
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //+2 cards
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
    #####: 1007:	}
    #####: 1008:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
        -: 1010:	  //+2 coins
    #####: 1011:	  state->coins = state->coins + 2;
    #####: 1012:	}
        -: 1013:      else
        -: 1014:	{
        -: 1015:	  //trash 2 cards in hand
    #####: 1016:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1017:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1018:	}
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
    #####: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
    #####: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
        -: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
    #####: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
    #####: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
    #####: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1069:	  state->coins += 2;
    #####: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
    #####: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
    #####: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1099:	    {
    #####: 1100:	      j++;
    #####: 1101:	    }
    #####: 1102:	}
    #####: 1103:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
        -: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1120:	    }
    #####: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
    #####: 1134:		  break;
        -: 1135:		}
    #####: 1136:	    }
    #####: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1147:	    {
    #####: 1148:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:		{
    #####: 1150:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      discardCard(j, i, state, 0);
    #####: 1153:		      break;
        -: 1154:		    }
    #####: 1155:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1158:			{
        -: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
    #####: 1164:		}
        -: 1165:					
    #####: 1166:	    }
        -: 1167:				
    #####: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1223:	}
    #####: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
    #####: 1237:	}
    #####: 1238:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
    #####: 1259:}
        -: 1260:
function discardCard called 1000 returned 100% blocks executed 80%
        -: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
     1000: 1265:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1266:    {
        -: 1267:      //add card to played pile
     1000: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1269:      state->playedCardCount++;
     1000: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
     1000: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
     1000: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
    #####: 1280:    }
     1000: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    #####: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
     1000: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
     1000: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
     1000: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
     1000: 1296:  return 0;
        -: 1297:}
        -: 1298:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
    #####: 1318:    }
    #####: 1319:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
    #####: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
    #####: 1333:  return 0;
    #####: 1334:}
        -: 1335:
function updateCoins called 0 returned 0% blocks executed 0%
        -: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
    #####: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
    #####: 1344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1345:    {
    #####: 1346:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1347:	{
    #####: 1348:	  state->coins += 1;
    #####: 1349:	}
    #####: 1350:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
    #####: 1353:	}
    #####: 1354:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
    #####: 1357:	}	
    #####: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
    #####: 1361:  state->coins += bonus;
        -: 1362:
    #####: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
